services:
  api:
    container_name: api-dev
    image: api-dev:latest
    build:
      context: ./api
      dockerfile: ./docker/Dockerfile
      # Should match the stage name in Dockerfile
      target: development
    restart: always
    healthcheck:
      test: "curl --fail http://localhost:5000"
      interval: 5s
      timeout: 5s
      retries: 5
    init: true
    tty: true
    ports:
      # Port for the app
      - 5000:8080
      # node process is listening for a debugging client on
      - 9230:9229
    expose:
      # Port for the app (i.e. webpack dev server port)
      - 5000
    env_file:
      - ./api/docker/.api.common.env
      - ./api/docker/.api.dev.env
      - ./postgres/docker/.postgres.env
      - ./rabbitmq/docker/.rabbitmq.env
    volumes:
      # Recompile code on changes
      - ./api:/home/node
      # Set the container timezone to the time zone of host machine
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - livestreamer_backend_dev

  postgres:
    container_name: postgres-dev
    image: postgres-dev:latest
    build:
      context: ./postgres
      dockerfile: ./docker/Dockerfile
      target: production
    restart: "no"
    environment:
      # This var is required to run the healthcheck 'test' command
      PGUSER: "postgres"
    healthcheck:
      test: "pg_isready --user $$POSTGRES_USER --databse $$POSTGRES_DB"
      interval: 5s
      timeout: 5s
      retries: 5
    init: true
    env_file:
      - ./postgres/docker/.postgres.env
    volumes:
      - ./postgres/volume_postgresql-data:/var/lib/postgresql/data/
    ports:
      - 54324:5432
    networks:
      - livestreamer_backend_dev

  redis:
    container_name: redis-dev
    image: redis-dev:latest
    build:
      context: ./redis
      dockerfile: ./docker/Dockerfile
    healthcheck:
      test: "redis-cli --raw incr ping"
      interval: 5s
      timeout: 5s
      retries: 5
    init: true
    ports:
      - 6380:6379
    networks:
      - livestreamer_backend_dev

  rabbitmq:
    container_name: "rabbitmq-dev"
    image: rabbitmq-dev:latest
    build:
      context: ./rabbitmq
      dockerfile: ./docker/Dockerfile
    healthcheck:
      test: "curl --fail http://localhost:15672"
      interval: 30s
      timeout: 10s
      retries: 5
    init: true
    ports:
      # Message broker itself:
      - 5672:5672
      # Web UI for managing message broker
      - 15672:15672
    # We map volumes so that our durable queues and logs are not lost on container restart..
    # ':ro' sets the volume as read-only.
    volumes:
      - ./rabbitmq/rabbitmq_data:/var/lib/rabbitmq/
      - ./rabbitmq/rabbitmq_log:/var/log/rabbitmq/
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
    env_file:
      - ./rabbitmq/docker/.rabbitmq.env
    networks:
      - livestreamer_backend_dev

networks:
  livestreamer_backend:
    name: livestreamer_backend_dev
    driver: bridge
