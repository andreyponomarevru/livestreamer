name: CI-CD

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [main]
    # This will only trigger on pushes to the master branch with changes in the my-directory directory tree
    paths: [livestreamer-backend/api/**]
  pull_request:
    branches: [main]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  build:
    runs-on: ubuntu-latest
    container:
      image: lucasalt/act_base:latest
    steps: 
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          path: "live-streamer"
          
      - name: RunOne
        run: |
          echo Hello World!

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Build the stack
        run: |
          cd livestreamer-backend/
          docker-compose -f ./docker-compose.yml -f docker-compose.prod.yml up -d
      - name: Test
        run: docker run --network container:webapp-frontend appropriate/curl -s --retry 10 --retry-connrefused http://localhost:5000/







  # This workflow contains multiple jobs
  build_test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Setup Node.js
        uses: actions/setup-node@master
        with:
          node-version: ${{ matrix.node-version }}

      # Install app dependencies
      - name: Install Dependencies
        run: |
          cd livestreamer-backend/api/
          npm ci

      # Build and test the app
      - name: Build and test
        run: |
          cd livestreamer-backend/api/
          npm run build
          npm run test:unit

  push_to_docker_hub:
    runs-on: ubuntu-latest
    # Build Docker image and push to Docker Hub only if the app build and test is successfull
    needs: [build_test]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          # This path is totally independant from the 'file' directve below
          context: ./livestreamer-backend/api/
          # This path is totally independant from the 'context' directive above
          file: ./livestreamer-backend/api/docker/Dockerfile.prod
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/livestreamer-backend_api:latest
# I left this job here only for reference. As in Dockerfile I use the 
# distroless image (i.e. it doesn't have shell), this step is impossible 
# to execute
#
#      - name: Run the image in a container
#        uses: addnab/docker-run-action@v3
#        with:
#          image: ${{ secrets.DOCKERHUB_USERNAME }}/livestreamer-backend_api:latest
#          run: |
#            echo "running the docker image"
#            echo "Testing the nodejs app endpoints"
#            echo ${{ steps.docker_build.outputs.digest }}
            
  deploy:
    runs-on: ubuntu-latest   
    needs: [push_to_docker_hub]
    
    steps:
      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          # VPS IP
          host: ${{ secrets.VPS_SSH_HOST }}
          # VPS username
          username: ${{ secrets.VPS_SSH_USERNAME }}
          # SSH key (copy it from your local machine)
          key: ${{ secrets.VPS_SSH_SECRET }}
          # SSH port
          port: ${{ secrets.VPS_SSH_PORT }}
          script: |
            cd livestreamer-backend/
            echo "Pull new image"
            docker-compose -f /home/${{ secrets.VPS_SSH_USERNAME }}/livestreamer-backend/docker-compose.yml -f /home/${{ secrets.VPS_SSH_USERNAME }}/livestreamer-backend/docker-compose.prod.yml pull
            echo "Restart the container"
            docker-compose -f /home/${{ secrets.VPS_SSH_USERNAME }}/livestreamer-backend/docker-compose.yml -f /home/${{ secrets.VPS_SSH_USERNAME }}/livestreamer-backend/docker-compose.prod.yml up --force-recreate --build --no-deps -d
            echo "Delete old image"
            docker image prune -f
