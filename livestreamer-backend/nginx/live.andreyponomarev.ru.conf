##
# Rate Limiting
##

# https://www.nginx.com/blog/rate-limiting-nginx/

# For some routes, I want to rate limit only particular type of requests (only 
# POST, istead of all methods). To do this, I map ip address to $limit variable 
# if request is of type POST
map $request_method $post_req_ip_address {
  default         "";
  
  # $binary_remote_addr holds a binary representation of a client’s IP address
  # The limit_req_zone directive sets the parameters for rate limiting and the 
  # shared memory zone, but it does not actually limit the request rate. For 
  # that you need to apply the limit to a specific location or server block by 
  # including a limit_req directive there.
  POST            $binary_remote_addr;
}

map $request_method $put_req_ip_address {
  default         "";
  PUT             $binary_remote_addr;
}

map $request_method $get_req_ip_address {
  default         "";
  GET             $binary_remote_addr;
}

# Define zone (creates 10mb ('10m') zone in memory for storing binary ips)
# So now each unique IP address sending POST request is limited to 10 PUT 
# requests per minute

limit_req_zone $put_req_ip_address zone=stream_like_limit:10m rate=10r/m;

# If you want to apply this rule to all HTTP methods, replace 
# `$post_req_ip_address` with `$binary_remote_addr`
# 30 requests per 1 minute
limit_req_zone $post_req_ip_address zone=sign_in_limit:10m rate=30r/m;

limit_req_zone $post_req_ip_address zone=sign_up_limit:10m rate=30r/m;

# Limiting the Number of Connections (this setting is applied to `/stream` at 
# the bottom of the file in `location` block). Note that we apply this setting 
# to only GET requests. For sending POST requests you need to be authenticated 
# and authorized, so there is no need to rate limit POST requests. For details 
# refer to 
# https://www.nginx.com/blog/mitigating-ddos-attacks-with-nginx-and-nginx-plus/
limit_conn_zone $get_req_ip_address zone=stream:10m;

##
# Cache settings: creating expires map
##

# The `ngx_http_map_module` module creates variables whose values depend on 
# values of other variables 
# (http://nginx.org/en/docs/http/ngx_http_map_module.html). What does it mean:
#
# In Nginx, you are allowed to access the HTTP headers of the response that was 
# sent to the client. These variables are not available at all times—they will 
# only carry a value after the response is sent, for instance, at the time of 
# writing messages in the logs. 
# One of these variables is `sent_http_content_type` (dont search for it in  
# documentation, it's not mentioned). This variable contains a value of the 
# Content-Type HTTP header, indicating the MIME type of the resource being 
# transmitted.
#
# consider the line 
# 'text/css                   max;' 
# — it means, that if `$sent_http_content_type` variable value is `text/css`, 
# $expires variable  will be set to `max`. Then, down below, we have a line 
# `expires $expires;`  which applies this map rule. 
# So, the result of all this is the setting `expires max` or `expires epoch` or 
# `expires ...smth else`, depending on response's 'Content-Type' header value
map $sent_http_content_type $expires {
  default                    off; # The `off` parameter disables adding or 
                                  # modifying the “Expires” and “Cache-Control”
                                  # response header fields.
  text/html                  epoch; # do not cache; more verbose explanation
                                    # from the doc: the `epoch` parameter sets
                                    # “Expires” to the value “Thu, 01 Jan 1970 
                                    # 00:00:01 GMT”, and “Cache-Control” to 
                                    # “no-cache”.
  text/css                   max; # The `max` parameter sets “Expires” to the
                                  # value “Thu, 31 Dec 2037 23:55:55 GMT”, and 
                                  # “Cache-Control” to 10 years.
  application/javascript     max;
  ~image/                    max; # matches all file types containing image/ in
                                  # their MIME-type name (like "image/jpg", 
                                  # "image/png") 
}

##
# Upstream servers
##

upstream api {
  server localhost:5000;
}

##
# Main server (acts as proxy)
##

# Do not serve the request if the host header field is empty 
#
# NOTE: during development, add 
# `127.0.0.1   musicbox.com` to 
# /etc/hosts and send requests to this musicbox.com:8000, not localhost:8000. 
# If you send requests to localhost, the HOST header will be empty and this 
# server block will activate, returning 444 error.

# TODO: uncomment this block for production environment, I've commented it out to be able to check this website in my home network
server {
  listen 443;
  server_name "" localhost 127.0.0.1;
  return 444;
}

server {
  ##
  # SSL Ceryificate
  ##
 
  listen 443 ssl; 
  ssl_certificate /etc/letsencrypt/live/andreyponomarev.ru/fullchain.pem; 
  ssl_certificate_key /etc/letsencrypt/live/andreyponomarev.ru/privkey.pem; 
  include /etc/letsencrypt/options-ssl-nginx.conf; 
  ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

  ##
  # Basic Settings
  ##

  server_name live.andreyponomarev.ru www.live.andreyponomarev.ru;

  root /var/www/html; # left default, not used anyway

  proxy_set_header HOST $host; # Forward "host" header to upstream server
  # Forward client IP information to upstream server
  proxy_set_header X-Real-IP $remote_addr;
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

  ##
  # Caching settings
  ##

  # Enable caching for static files (adds "Expires" and "Cache-Control" headers)
  # This line utilizes variable `$expires` which is defined and conditionally  
  # assigned some value at the very top in `map $sent_http_content_type 
  # $expires` block
  expires $expires;

  proxy_hide_header X-Powered-By;

  ##
  # Client (react.js)
  ##

  location / {
    root /var/www/live.andreyponomarev.ru/html; # This is the place we need to put HTML page in next step
    index index.html index.htm;
    try_files $uri $uri/ =404;
  
    # Gzip Settings
    gzip on;
    gzip_vary on;
    # gzip_proxied any; # http://nginx.org/en/docs/http/ngx_http_gzip_module.html#gzip_proxied
    gzip_comp_level 6;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
  }

  # 'client' container, settings for webpack-dev-server WebSocket
  #location /ws {
  #  proxy_pass               http://client;
  #  proxy_redirect           off;
  #  
  #  proxy_set_header         X-Real-IP $remote_addr;
  #  proxy_set_header         X-Forwarded-For $remote_addr;
  #
  #  proxy_http_version       1.1;
  #  proxy_set_header         Upgrade $http_upgrade;
  #  proxy_set_header         Connection "upgrade";
  #  proxy_set_header         HOST $host;
  #}

  ##
  # 'api' container 
  ##

  location = /api/v1/stream/like {
    rewrite /api/v1/(stream/like)$ /$1 break;
    limit_req zone=stream_like_limit; # Rate Limiting (see settings at the top of the file)
    proxy_set_header HOST $host;
    proxy_pass http://api;
  }

  location = /api/v1/stream {
    # This block enables streaming audio using chunked encoding

    proxy_request_buffering      off;
    # gzip                       off;
    proxy_buffering              off;    
    proxy_http_version           1.1;
    client_max_body_size         500M;
    
    # Rate Limiting (allow each client IP address to open no more than 2 
    # connections to the /stream area of api (see settings at the top of the 
    # file)
    limit_conn stream 2; # enable in production, disbaled for developembnt

    rewrite /api/v1/(stream)$ /$1 break;
    proxy_set_header HOST $host;
    proxy_pass http://api;
  }

  location ^~ /api/v1/sessions {
      rewrite /api/v1/(sessions)$ /$1 break;
      limit_req zone=sign_in_limit burst=20 nodelay;
      proxy_set_header HOST $host;
      proxy_pass http://api;
  }

  location = /api/v1/user {
      rewrite /api/v1/(user)$ /$1 break;
      limit_req zone=sign_up_limit burst=20 nodelay;      
      proxy_set_header HOST $host;
      proxy_pass http://api;
  }

  location ~* /api/v1/.+ {
    rewrite /api/v1/(.+)/*$ /$1 break;
    proxy_set_header HOST $host;
    proxy_pass http://api;
  }
}
