services:
  api:
    container_name: api-prod
    image: "ponomarevandrey/livestreamer_api-prod:latest"
    # Uncomment 'build' to build the image for the first-time deployment (i.e.
    # to upload to Docker Hub) or if you want to run prod env on local machine
    # instead of VPS
    build:
      context: ./api
      dockerfile: ./docker/Dockerfile
      # Should match the stage name in Dockerfile
      target: production
    restart: always
    healthcheck:
      test: "curl --fail http://localhost:5000"
      interval: 5s
      timeout: 5s
      retries: 5
    init: true
    tty: true
    ports:
      # Adding '127.0.0.1:' hides opened ports from Internet, 5000 is available
      # only in internal network on host machine
      - 127.0.0.1:5000:5000
    env_file:
      - ./api/docker/.api.common.env
      - ./api/docker/.api.prod.env
      - ./postgres/docker/.postgres.env
      - ./rabbitmq/docker/.rabbitmq.env
    volumes:
      # set the container timezone to the time zone of host machine
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      - postgres
      - redis
      - rabbitmq

  postgres:
    container_name: postgres-prod
    image: "ponomarevandrey/livestreamer_postgres-prod:latest"
    # Uncomment to build the image for the first-time deployment (i.e. to
    # upload to Docker Hub) or if you want to run prod env on local machine
    # instead of VPS
    build:
      context: ./postgres
      dockerfile: ./docker/Dockerfile
      target: production
    restart: always
    environment:
      # This var is required to run the healthcheck 'test' command
      PGUSER: "postgres"
    healthcheck:
      test: "pg_isready --user $$POSTGRES_USER --databse $$POSTGRES_DB"
      interval: 5s
      timeout: 5s
      retries: 5
    init: true
    env_file:
      - ./postgres/docker/.postgres.env
    volumes:
      - /var/backups/:/var/backups/
    ports:
      - 127.0.0.1:5432:5432

  redis:
    image: "ponomarevandrey/livestreamer_redis-prod:latest"
    container_name: redis-prod
    # Uncomment to build the image for the first-time deployment (i.e. to
    # upload to Docker Hub) or if you want to run prod env on local machine
    # instead of VPS
    build:
      context: ./redis
      dockerfile: ./docker/Dockerfile
    healthcheck:
      test: "redis-cli --raw incr ping"
      interval: 5s
      timeout: 5s
      retries: 5
    init: true
    ports:
      - 127.0.0.1:6379:6379

  rabbitmq:
    container_name: "ponomarevandrey/livestreamer_rabbitmq-prod:latest"
    image: rabbitmq-prod:latest
    build:
      context: ./rabbitmq
      dockerfile: ./docker/Dockerfile
    healthcheck:
      test: "rabbitmq-diagnostics --quiet ping"
      interval: 30s
      timeout: 10s
      retries: 5
    init: true
    ports:
      - 127.0.0.1:5672:5672
    # We map volumes so that our durable queues and logs are not lost on container restart..
    # ':ro' sets the volume as read-only.
    volumes:
      - ./rabbitmq/rabbitmq_data:/var/lib/rabbitmq/
      - ./rabbitmq/rabbitmq_log:/var/log/rabbitmq/
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
    env_file:
      - ./rabbitmq/docker/.rabbitmq.env
