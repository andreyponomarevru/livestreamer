services:
  api:
    container_name: api-test
    image: api-test:latest
    build:
      context: ./api
      dockerfile: ./docker/Dockerfile
      # Should match the stage name in Dockerfile
      target: test
    restart: on-failure
    healthcheck:
      test: "curl --fail http://localhost:5000"
      interval: 5s
      timeout: 5s
      retries: 5
    init: true
    tty: true
    ports:
      # Port for the app
      - 5001:8080
      # node.js process is listening for a debugging client on
      - 9231:9229
    expose:
      # Port for the app
      - 5001
    env_file:
      - ./api/docker/.api.common.env
      - ./api/docker/.api.test.env
      - ./postgres/docker/.postgres.env
      - ./rabbitmq/docker/.rabbitmq.env
    volumes:
      # set the container timezone to the time zone of host machine
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - livestreamer_backend_test

  postgres:
    container_name: postgres-test
    image: postgres-test:latest
    build:
      context: ./postgres
      dockerfile: ./docker/Dockerfile
      target: production
    init: true
    restart: "no"
    environment:
      # This var is required to run the healthcheck 'test' command
      PGUSER: "postgres"
    healthcheck:
      test: "pg_isready --user $$POSTGRES_USER --databse $$POSTGRES_DB"
      interval: 5s
      timeout: 5s
      retries: 5
    env_file:
      - ./postgres/docker/.postgres.env
    ports:
      - 54323:5432
    networks:
      - livestreamer_backend_test

  redis:
    container_name: redis-test
    image: redis-test:latest
    build:
      context: ./redis
      dockerfile: ./docker/Dockerfile
    init: true
    healthcheck:
      test: "redis-cli --raw incr ping"
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - 6379:6379
    networks:
      - livestreamer_backend_test

  rabbitmq:
    container_name: "rabbitmq-test"
    image: rabbitmq-test:latest
    build:
      context: ./rabbitmq
      dockerfile: ./docker/Dockerfile
    healthcheck:
      test: "curl --fail http://localhost:15672"
      interval: 30s
      timeout: 10s
      retries: 5
    init: true
    expose:
      # Message broker itself:
      - 5672:5672
      # Web UI for managing message broker
      - 15672:15672
    # We map volumes so that our durable queues and logs are not lost on container restart..
    # ':ro' sets the volume as read-only.
    volumes:
      - ./rabbitmq/rabbitmq_data:/var/lib/rabbitmq/
      - ./rabbitmq/rabbitmq_log:/var/log/rabbitmq/
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
    env_file:
      - ./rabbitmq/docker/.rabbitmq.env
    networks:
      - livestreamer_backend_test

networks:
  livestreamer_backend_test:
    name: livestreamer_backend_test
    driver: bridge
